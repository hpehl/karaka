package name.pehl.tire.server.rest.security;

import java.util.Map;

import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.Request;

import com.google.inject.Inject;

/**
 * Security check which reads the security token using a configured
 * {@link SecurityTokenReader} and compares it against the security cookie
 * generated by {@link SecurityCookieFilter}.
 * 
 * @author $LastChangedBy:$
 * @version $LastChangedRevision:$
 */
public class CookieSecurityCheck implements SecurityCheck<Map<String, Cookie>>
{
    private final String name;
    private final SecurityTokenReader securityTokenReader;


    @Inject
    public CookieSecurityCheck(@SecurityToken final String name, final SecurityTokenReader<T> securityTokenReader)
    {
        this.name = name;
        this.securityTokenReader = securityTokenReader;
    }


    @Override
    public void check(Map<String, Cookie> input) throws SecurityException
    {
        String token = securityTokenReader.readToken(request, response);
        String cookie = readCookie(request);
        if (!(token.equals(cookie)))
        {
            throw new SecurityException("Invalid security token");
        }
    }


    private String readCookie(Request request)
    {
        String result = null;
        Series<Cookie> cookies = request.getCookies();
        for (Cookie cookie : cookies)
        {
            if (cookie.getName().equals(name))
            {
                result = cookie.getValue();
                break;
            }
        }
        return result;
    }
}
